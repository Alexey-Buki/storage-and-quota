(()=>{var t={264:(t,e,r)=>{t.exports=r(588)},588:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var o=e&&e.prototype instanceof y?e:y,a=Object.create(o.prototype),i=new O(n||[]);return a._invoke=function(t,e,r){var n=f;return function(o,a){if(n===p)throw new Error("Generator is already running");if(n===d){if("throw"===o)throw a;return j()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var s=L(i,r);if(s){if(s===v)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var c=l(t,e,r);if("normal"===c.type){if(n=r.done?d:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=d,r.method="throw",r.arg=c.arg)}}}(t,r,i),a}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",p="executing",d="completed",v={};function y(){}function g(){}function m(){}var b={};c(b,a,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(D([])));k&&k!==r&&n.call(k,a)&&(b=k);var x=m.prototype=y.prototype=Object.create(b);function I(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function E(t,e){function r(o,a,i,s){var c=l(t[o],t,a);if("throw"!==c.type){var u=c.arg,f=u.value;return f&&"object"==typeof f&&n.call(f,"__await")?e.resolve(f.__await).then((function(t){r("next",t,i,s)}),(function(t){r("throw",t,i,s)})):e.resolve(f).then((function(t){u.value=t,i(u)}),(function(t){return r("throw",t,i,s)}))}s(c.arg)}var o;this._invoke=function(t,n){function a(){return new e((function(e,o){r(t,n,e,o)}))}return o=o?o.then(a,a):a()}}function L(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method))return v;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=l(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var a=o.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,v):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function B(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function D(t){if(t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}return{next:j}}function j(){return{value:e,done:!0}}return g.prototype=m,c(x,"constructor",m),c(m,"constructor",g),g.displayName=c(m,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===g||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,c(t,s,"GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},I(E.prototype),c(E.prototype,i,(function(){return this})),t.AsyncIterator=E,t.async=function(e,r,n,o,a){void 0===a&&(a=Promise);var i=new E(u(e,r,n,o),a);return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},I(x),c(x,s,"Generator"),c(x,a,(function(){return this})),c(x,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=D,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(B),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return s.type="throw",s.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=t,i.arg=e,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),B(r),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;B(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:D(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),v}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,r),a.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";function t(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function e(t,e,r,n,o,a,i){try{var s=t[a](i),c=s.value}catch(t){return void r(t)}s.done?e(c):Promise.resolve(c).then(n,o)}function n(t){return function(){var r=this,n=arguments;return new Promise((function(o,a){var i=t.apply(r,n);function s(t){e(i,o,a,s,c,"next",t)}function c(t){e(i,o,a,s,c,"throw",t)}s(void 0)}))}}var o=r(264),a=r.n(o);function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}let s,c;const u=new WeakMap,l=new WeakMap,f=new WeakMap,h=new WeakMap,p=new WeakMap;let d={get(t,e,r){if(t instanceof IDBTransaction){if("done"===e)return l.get(t);if("objectStoreNames"===e)return t.objectStoreNames||f.get(t);if("store"===e)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return y(t[e])},set:(t,e,r)=>(t[e]=r,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function v(t){return"function"==typeof t?(e=t)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(c||(c=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(g(this),t),y(u.get(this))}:function(...t){return y(e.apply(g(this),t))}:function(t,...r){const n=e.call(g(this),t,...r);return f.set(n,t.sort?t.sort():[t]),y(n)}:(t instanceof IDBTransaction&&function(t){if(l.has(t))return;const e=new Promise(((e,r)=>{const n=()=>{t.removeEventListener("complete",o),t.removeEventListener("error",a),t.removeEventListener("abort",a)},o=()=>{e(),n()},a=()=>{r(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",o),t.addEventListener("error",a),t.addEventListener("abort",a)}));l.set(t,e)}(t),r=t,(s||(s=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((t=>r instanceof t))?new Proxy(t,d):t);var e,r}function y(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,r)=>{const n=()=>{t.removeEventListener("success",o),t.removeEventListener("error",a)},o=()=>{e(y(t.result)),n()},a=()=>{r(t.error),n()};t.addEventListener("success",o),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&u.set(e,t)})).catch((()=>{})),p.set(e,t),e}(t);if(h.has(t))return h.get(t);const e=v(t);return e!==t&&(h.set(t,e),p.set(e,t)),e}const g=t=>p.get(t);function m(t,e,{blocked:r,upgrade:n,blocking:o,terminated:a}={}){const i=indexedDB.open(t,e),s=y(i);return n&&i.addEventListener("upgradeneeded",(t=>{n(y(i.result),t.oldVersion,t.newVersion,y(i.transaction))})),r&&i.addEventListener("blocked",(()=>r())),s.then((t=>{a&&t.addEventListener("close",(()=>a())),o&&t.addEventListener("versionchange",(()=>o()))})).catch((()=>{})),s}const b=["get","getKey","getAll","getAllKeys","count"],w=["put","add","delete","clear"],k=new Map;function x(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(k.get(e))return k.get(e);const r=e.replace(/FromIndex$/,""),n=e!==r,o=w.includes(r);if(!(r in(n?IDBIndex:IDBObjectStore).prototype)||!o&&!b.includes(r))return;const a=async function(t,...e){const a=this.transaction(t,o?"readwrite":"readonly");let i=a.store;return n&&(i=i.index(e.shift())),(await Promise.all([i[r](...e),o&&a.done]))[0]};return k.set(e,a),a}var I;I=d,d={...I,get:(t,e,r)=>x(t,e)||I.get(t,e,r),has:(t,e)=>!!x(t,e)||I.has(t,e)};var E,L="blob_store",_=new(function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.name=e,this.version=1,this.storage=window.localStorage,this.idbDatabase=null,this.key="__db_"+this.name}var e,r,o,s,c,u,l,f,h;return e=t,r=[{key:"_addId",value:function(t){try{var e=JSON.parse(this.storage.getItem(this.key)||"{}");e.ids=e.ids||{},e.ids[t]=1,this.storage.setItem(this.key,JSON.stringify(e))}catch(t){console.error(t)}return this}},{key:"_removeId",value:function(t){try{var e=JSON.parse(this.storage.getItem(this.key)||"{}");e.ids=e.ids||{},delete e.ids[t],this.storage.setItem(this.key,JSON.stringify(e))}catch(t){console.error(t)}return this}},{key:"_checkId",value:function(t){try{var e=JSON.parse(this.storage.getItem(this.key)||"{}");return e.ids=e.ids||{},!!e.ids[t]}catch(t){console.error(t)}return!1}},{key:"_clearIds",value:function(){try{var t=JSON.parse(this.storage.getItem(this.key)||"{}");t.ids=t.ids||{},t.ids={},this.storage.setItem(this.key,JSON.stringify(t))}catch(t){console.error(t)}return this}},{key:"_getConnection",value:(h=n(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!this.idbDatabase){t.next=2;break}return t.abrupt("return",Promise.resolve(this.idbDatabase));case 2:return t.next=4,m(this.name,this.version,{upgrade:function(t,e,r,n){t.createObjectStore(L,{keyPath:"id",autoIncrement:!0})},blocked:function(t){console.log("blocked",t)},blocking:function(t){console.log("blocking",t)},terminated:function(){this.idbDatabase=null}});case 4:return t.abrupt("return",this.idbDatabase=t.sent);case 5:case"end":return t.stop()}}),t,this)}))),function(){return h.apply(this,arguments)})},{key:"get",value:(f=n(a().mark((function t(e){var r,n;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this._checkId(e)||console.warn("the key ".concat(e," does not exist in metadata")),t.next=3,this._getConnection();case 3:return r=t.sent,t.next=6,r.get(L,e);case 6:return!(n=t.sent)&&this._checkId(e)&&console.error("the key ".concat(e," was lost. the database is inconsistent")),t.abrupt("return",n);case 9:case"end":return t.stop()}}),t,this)}))),function(t){return f.apply(this,arguments)})},{key:"put",value:(l=n(a().mark((function t(e){var r,n;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._getConnection();case 2:return r=t.sent,t.next=5,r.add(L,{blob:e});case 5:return n=t.sent,this._addId(n),t.abrupt("return",n);case 8:case"end":return t.stop()}}),t,this)}))),function(t){return l.apply(this,arguments)})},{key:"remove",value:(u=n(a().mark((function t(e){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return console.log("remove ".concat(e)),this._checkId(e)||console.warn("the key ".concat(e," does not exist in metadata")),this._removeId(e),t.next=5,this._getConnection();case 5:return t.abrupt("return",t.sent.delete(L,e));case 6:case"end":return t.stop()}}),t,this)}))),function(t){return u.apply(this,arguments)})},{key:"clear",value:(c=n(a().mark((function t(){var e;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._getConnection();case 2:return e=t.sent,this._clearIds(),t.abrupt("return",e.clear(L));case 5:case"end":return t.stop()}}),t,this)}))),function(){return c.apply(this,arguments)})},{key:"getAll",value:(s=n(a().mark((function t(){var e;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this._getConnection();case 2:return e=t.sent,t.abrupt("return",e.getAll(L));case 4:case"end":return t.stop()}}),t,this)}))),function(){return s.apply(this,arguments)})},{key:"getIterator",value:function(){}},{key:"getKeys",value:function(){try{var t=JSON.parse(this.storage.getItem(this.key)||"{}");return Promise.resolve(Object.keys(t.ids||{}))}catch(t){console.error(t)}return Promise.resolve([])}}],o=[{key:"removeDatabase",value:function(t){return function(t,{blocked:e}={}){const r=indexedDB.deleteDatabase(t);return e&&r.addEventListener("blocked",(()=>e())),y(r).then((()=>{}))}(t,{blocked:function(t){console.log("blocked",t)}})}}],r&&i(e.prototype,r),o&&i(e,o),Object.defineProperty(e,"prototype",{writable:!1}),t}())("ifs");function B(t){for(var e={B:"kB",kB:"mB",mB:"gB",gB:"tB"},r="B";t>1024;)t=Number((t/1024).toFixed(2)),r=e[r];return t+" "+r}function O(){return(O=n(a().mark((function t(){var e,r,n,o;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,navigator.storage.estimate();case 2:e=t.sent,r=document.getElementById("quota-storage"),n=e.usageDetails||{},o="<ul>"+Object.keys(n).reduce((function(t,e){return t+"<li>"+e+" = <b>"+B(n[e])+"</b></li>"}),"")+"</ul>",r.innerHTML="<div><b>"+B(e.quota)+"</b> / <b>"+B(e.usage)+"</b></div>"+o;case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function D(){return(D=n(a().mark((function t(){var e,r,n;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,navigator.storage.persisted();case 2:e=t.sent,r="<b>persistent</b>",e||(r='<b id="promted">no persistent</b><br/><button type="button" onClick="(function(){\n            window.makePersistent();\n            return false;\n        })();return false;">Make persisted</button>'),n="<div>\n        Storage is ".concat(r,"\n    </div>"),document.getElementById("storage-info").innerHTML=n;case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function j(){return(j=n(a().mark((function t(){var e,r;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.getAll();case 2:e=t.sent,r=e.reduce((function(t,e){return t+'<li class="file-item" '+e.id+">"+e.id+": "+e.blob.name+","+e.blob.type+","+B(e.blob.size)+'<span class="remove-file" onClick="(function(key){\n                window.deleteFile(key);\n                return false;\n            })('.concat(e.id,');return false;">X</span>')+"</li>"}),""),document.getElementById("file-list").innerHTML="<ul>"+r+"</ul>";case 5:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function S(t){return P.apply(this,arguments)}function P(){return P=n(a().mark((function t(e){var r,o,i;return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(e>0)){t.next=11;break}i=0;case 2:if(!(i<e)){t.next=10;break}return o=parseInt(1e7*Math.random()),r=new File(["a".repeat(o)],"text_"+o+".txt",{type:"text/plain"}),t.next=7,_.put(r);case 7:++i,t.next=2;break;case 10:return t.abrupt("return",T());case 11:return t.next=13,_.getAll();case 13:return t.sent.slice(0,Math.abs(e)).map((function(t){return t.id})).forEach(function(){var t=n(a().mark((function t(e){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.remove(e);case 2:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),t.abrupt("return",T());case 16:case"end":return t.stop()}}),t)}))),P.apply(this,arguments)}function N(){return(N=n(a().mark((function t(){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.clear();case 2:T();case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function T(){console.log("update info"),function(){D.apply(this,arguments)}(),function(){O.apply(this,arguments)}(),function(){j.apply(this,arguments)}()}window.ifs=_,window.makePersistent=n(a().mark((function e(){var r,n,o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([navigator.storage.persisted(),navigator.permissions.query({name:"persistent-storage"})]);case 2:if(r=e.sent,s=2,n=function(t){if(Array.isArray(t))return t}(a=r)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,a=[],i=!0,s=!1;try{for(r=r.call(t);!(i=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);i=!0);}catch(t){s=!0,o=t}finally{try{i||null==r.return||r.return()}finally{if(s)throw o}}return a}}(a,s)||function(e,r){if(e){if("string"==typeof e)return t(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(e,r):void 0}}(a,s)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),o=n[0],i=n[1],console.log(i),o||"granted"!=i.state){e.next=13;break}return e.next=10,navigator.storage.persist();case 10:T(),e.next=14;break;case 13:o||"prompt"!=i.state||(console.log("prompt",i),document.getElementById("promted").innerHTML="promted",i.onchange=function(){return T()});case 14:case"end":return e.stop()}var a,s}),e)}))),window.deleteFile=function(){var t=n(a().mark((function t(e){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,_.remove(e);case 2:T();case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),E=document.getElementById("count"),document.getElementById("clear").addEventListener("click",(function(){return function(){return N.apply(this,arguments)}()})),document.getElementById("increase").addEventListener("click",(function(){var t;t=parseInt(E.value)||0,S(Math.abs(t)),E.value="0"})),document.getElementById("decrease").addEventListener("click",(function(){S(-(parseInt(E.value)||0)),E.value="0"})),T()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,